#
#
# User type
#
#
scalar Time

type User {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    name: String!
    familyName: String!
    nickName: String!
    email: String!
    matricule: String!
    age: Int!
    birthDate: Time!
    sex: Int!
    lang: Int!
    status: Int!
    profileImageXid: String!
    description: String!
    coverText: String!
    profile: String!
    experienceDetail: String!
    additionalDescription: String!
    addOnTitle: String!
}

# Input

input NewUserInput {
    name: String!
    familyName: String!
    nickName: String
    email: String!
    matricule: String
    age: Int
    birthDate: Time!
    sex: Int!
    lang: Int!
}

input UserLogin {
    email: String!
    password: String!
}

input UpdateUser {
    name: String
    familyName: String
    nickName: String
    email: String
    description: String
    coverText: String
    profile: String
    experienceDetail: String
    additionalDescription: String
    addOnTitle: String
}

#
#
# Authorization type
#
#

type Authorization {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userId: ID!
    level: Int!
}

type UserAuthorizationLink {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    linkType: Int!
    actors: [UserAuthorizationLinkActor]!
}

type UserAuthorizationLinkActor {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userAuthorizationLink: UserAuthorizationLink!
    authorizationId: Int!
}
#
#
# Password type
#
#
type Password {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userId: ID!
    psw: String!
    contentHash: String!
}

input NewPassword {
    psw: String!
}

#
#
# Code type
#
#

type Code {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userId: ID!
    verificationCode: Int!
}

#
#
# Address type
#
#
type Address {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    country: String
    city: String
    latitude: Float
    longitude: Float
    street: String
    FullAddress: String
    xId: String
}

input NewAddress {
    country: String!
    city: String!
    latitude: Float!
    longitude: Float!
    street: String!
    FullAddress: String
}

type UserAddress {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userId: ID
    addressId: ID
    addressType: String
}
#
#
# Phone Type
#
#
type PhoneNumber{
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    mobilePhoneNumber: String!
    isUrgency: Boolean
}

input NewPhoneNumber{
    mobilePhoneNumber: String!
    isUrgency: Boolean
}

type UserPhoneNumber{
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userId: ID!
    phoneNumberId: ID!
}
#
#
# Calendar Planning Type
#
#
type CalendarPlanning {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    authorizationId : ID!
    startDateTime: Time!
    endDateTime: Time!
    description: String
}


input NewCalendarPlanning {
    startDateTime: Time!
    endDateTime: Time!
    description: String
}

type CalendarPlanningActor {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    authorizationId: ID!
    calendarPlanningId: ID
}
#
#
# Education Type
#
#
type Education {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    name: String!
}

type Subject {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    educationLevelId: ID!
    name: String!
}

type UserEducationLevelSubject {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userId: ID!
    SubjectId :ID!
}

input SubjectInput {
    id: ID
    educationLevelId : ID!
    Name : String
}
#
#
# Mark type
#
#
type UserMark {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    userId : ID!
    authorId: ID!
    authorComment: String
    authorMark: String!
}

input UserMarkInput {
    userId : ID!
    authorId: ID!
    authorComment: String
    authorMark: String!
}

#
#
# Message Type
#
#

type Message {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    resourceType: Int!
    resourceValue :Int!
    resourceLabel: String
    resourceLanguage: Int
}

input MessageInput {
    resourceType: Int!
    resourceValue :Int!
    resourceLabel: String
    resourceLanguage: Int
}

input MessageUpdateInput {
    id: ID!
    resourceType: Int!
    resourceValue :Int!
    resourceLabel: String
    resourceLanguage: Int
}

#
#
# ALL QUERIES
#
#

type Query {

    #    USER QUERIES
    userAuthorizationLink(id: ID!): UserAuthorizationLink
    userAuthorizationLinks: [UserAuthorizationLink!]!
    getCode: Code!
    verifyUserEmailValidationCode(code: Int!) : Int!
    sendUserEmailValidationCode: User!
    myProfile: User!
    getPasswordHistory: [Password]
    activateUser: User!

    #    Message QUERIES
    getMessages: [Message]
    getMessagesInLanguage(language: Int!) : [Message]
    getMessage(language: Int!, resourceNumber :Int!): Message!
    getMenuList: [Message]
    getMenuItems(language:Int!, menuNumber: Int!): [Message]

    #    Address QUERIES
    getUserAddress: Address!
    removeUserAddress: String!

    #    Phone QUERIES
    getUserPhoneNumber: PhoneNumber!

    #    Calendar Planning QUERIES
    getUserPlannings: CalendarPlanning!
    removeUserPlannings: String
    getPlanningActors(calendarId: ID!): [User!]
    removeUserFromPlanning(calendarPlanningId: ID!, selectedUserId: ID!): String

    #    Education QUERIES
    getUserSubjects: [Subject!]
    getSubjects(eduId: Int!) : [Subject!]
    getEducation: [Education!]
    getUserEducationLevel: Education!

    #    Mark QUERIES
    getUserAverageMark(userId: ID!): Int
    getUserMarkComment: [UserMark!]


}
#
#
# ALL MUTATIONS
#
#

type Mutation {
    #    USER MUTATIONS
    register(input: NewUserInput! , type: Int!) : String!
    updMyProfile(input: UpdateUser! ) : User!
    login(input: UserLogin!): String!
    newPassword(input: NewPassword!): String
    registerByEmail(authorizationLevel: Int!, email: String!): String

    #   Message mutations
    newMessage(input: MessageInput!): Message!
    updMessage(input: MessageUpdateInput!): Message!
    delMessage(language: Int!, messageNumber :Int!) : String
    newMenu(input: MessageInput!) : Message!
    delMenu(menuNumber: Int!): String
    newMenuItem(input: MessageInput!): Message!
    delMenuItem(input: MessageUpdateInput!) : String

    #    Address mutations
    newAddress(input: NewAddress!): Address!
    updateUserAddress(input: NewAddress!): Address!

    #    PHone mutations
    newPhoneNumber(input: NewPhoneNumber!) : PhoneNumber!
    updateUserPhoneNumber(input: NewPhoneNumber!) : PhoneNumber!

    #    Planning mutations
    createUserPlannings(input: NewCalendarPlanning!): CalendarPlanning!
    addUserIntoPlanning(calendarId: ID!, selectedUserId: ID!):CalendarPlanningActor!

    #   Education mutations
    setUserEducationLevel(input: SubjectInput!): Education!
    updateUserEducationLevel(input : SubjectInput!): Education!

    #    Mark mutations
    rateUser(input: UserMarkInput!): UserMark!

}
