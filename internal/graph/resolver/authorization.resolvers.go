package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"duval/internal/graph"
	"duval/internal/graph/model"
	"fmt"
)

// ID is the resolver for the id field.
func (r *authorizationResolver) ID(ctx context.Context, obj *model.Authorization) (int, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *authorizationResolver) UserID(ctx context.Context, obj *model.Authorization) (int, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// Level is the resolver for the level field.
func (r *authorizationResolver) Level(ctx context.Context, obj *model.Authorization) (int, error) {
	panic(fmt.Errorf("not implemented: Level - level"))
}

// UserAuthorizationLink is the resolver for the userAuthorizationLink field.
func (r *queryResolver) UserAuthorizationLink(ctx context.Context, id int) (*model.UserAuthorizationLink, error) {
	panic(fmt.Errorf("not implemented: UserAuthorizationLink - userAuthorizationLink"))
}

// UserAuthorizationLinks is the resolver for the userAuthorizationLinks field.
func (r *queryResolver) UserAuthorizationLinks(ctx context.Context) ([]*model.UserAuthorizationLink, error) {
	panic(fmt.Errorf("not implemented: UserAuthorizationLinks - userAuthorizationLinks"))
}

// ID is the resolver for the id field.
func (r *userAuthorizationLinkResolver) ID(ctx context.Context, obj *model.UserAuthorizationLink) (int, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// LinkType is the resolver for the linkType field.
func (r *userAuthorizationLinkResolver) LinkType(ctx context.Context, obj *model.UserAuthorizationLink) (int, error) {
	panic(fmt.Errorf("not implemented: LinkType - linkType"))
}

// Actors is the resolver for the actors field.
func (r *userAuthorizationLinkResolver) Actors(ctx context.Context, obj *model.UserAuthorizationLink) ([]*model.UserAuthorizationLinkActor, error) {
	panic(fmt.Errorf("not implemented: Actors - actors"))
}

// ID is the resolver for the id field.
func (r *userAuthorizationLinkActorResolver) ID(ctx context.Context, obj *model.UserAuthorizationLinkActor) (int, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserAuthorizationLink is the resolver for the userAuthorizationLink field.
func (r *userAuthorizationLinkActorResolver) UserAuthorizationLink(ctx context.Context, obj *model.UserAuthorizationLinkActor) (*model.UserAuthorizationLink, error) {
	panic(fmt.Errorf("not implemented: UserAuthorizationLink - userAuthorizationLink"))
}

// AuthorizationID is the resolver for the authorizationId field.
func (r *userAuthorizationLinkActorResolver) AuthorizationID(ctx context.Context, obj *model.UserAuthorizationLinkActor) (int, error) {
	panic(fmt.Errorf("not implemented: AuthorizationID - authorizationId"))
}

// Authorization returns graph.AuthorizationResolver implementation.
func (r *Resolver) Authorization() graph.AuthorizationResolver { return &authorizationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// UserAuthorizationLink returns graph.UserAuthorizationLinkResolver implementation.
func (r *Resolver) UserAuthorizationLink() graph.UserAuthorizationLinkResolver {
	return &userAuthorizationLinkResolver{r}
}

// UserAuthorizationLinkActor returns graph.UserAuthorizationLinkActorResolver implementation.
func (r *Resolver) UserAuthorizationLinkActor() graph.UserAuthorizationLinkActorResolver {
	return &userAuthorizationLinkActorResolver{r}
}

type authorizationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userAuthorizationLinkResolver struct{ *Resolver }
type userAuthorizationLinkActorResolver struct{ *Resolver }
