package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/cend-org/duval/graph/generated"
	"github.com/cend-org/duval/graph/model"
	"github.com/cend-org/duval/internal/database"
)

// Passwords is the resolver for the Passwords field.
func (r *queryResolver) Passwords(ctx context.Context) ([]model.Password, error) {
	panic(fmt.Errorf("not implemented: Passwords - Passwords"))
}

// Users is the resolver for the Users field.
func (r *queryResolver) Users(ctx context.Context) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: Register - Register"))
}

// MyProfile is the resolver for the MyProfile field.
func (r *queryResolver) MyProfile(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Register - Register"))
}

// GetAsset is the resolver for the GetAsset field.
func (r *queryResolver) GetAsset(ctx context.Context, id int) (*model.Asset, error) {
	var (
		as  model.Asset
		err error
	)

	err = database.Get(&as, `SELECT * FROM asset WHERE id = ?`, id)
	if err != nil {
		return nil, err
	}

	return &as, err
}

// Assets is the resolver for the Assets field.
func (r *queryResolver) Assets(ctx context.Context) ([]model.Asset, error) {
	var (
		assets []model.Asset
		err    error
	)

	err = database.Select(&assets, `SELECT * FROM asset WHERE id > 0`)
	if err != nil {
		return nil, err
	}

	return assets, err
}

// GetSchools is the resolver for the getSchools field.
func (r *queryResolver) GetSchools(ctx context.Context) ([]model.School, error) {
	var schools []model.School
	var err error

	err = database.Select(&schools, `SELECT * FROM school ORDER BY created_at`)
	if err != nil {
		return nil, err
	}

	return schools, err
}

// GetSubjects is the resolver for the getSubjects field.
func (r *queryResolver) GetSubjects(ctx context.Context, id int) ([]model.SchoolSubject, error) {
	var subjects []model.SchoolSubject
	var err error

	err = database.Select(&subjects, `SELECT * FROM school_subject WHERE school_number = ?`, id)
	if err != nil {
		return nil, err
	}

	return subjects, err
}

// GetSchool is the resolver for the getSchool field.
func (r *queryResolver) GetSchool(ctx context.Context, id int) (*model.School, error) {
	var (
		err    error
		school model.School
	)

	err = database.Get(&school, `SELECT * FROM school WHERE id = ?`, id)
	if err != nil {
		return nil, err
	}

	return &school, err
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
