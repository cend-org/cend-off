package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/cend-org/duval/graph/generated"
	"github.com/cend-org/duval/graph/model"
	"github.com/cend-org/duval/internal/database"
	"github.com/cend-org/duval/internal/pkg/phone"
	"github.com/cend-org/duval/internal/pkg/planning"
	"github.com/cend-org/duval/internal/pkg/user"
)

// Passwords is the resolver for the Passwords field.
func (r *queryResolver) Passwords(ctx context.Context) ([]model.Password, error) {
	panic(fmt.Errorf("not implemented: Passwords - Passwords"))
}

// GetAsset is the resolver for the GetAsset field.
func (r *queryResolver) GetAsset(ctx context.Context, id int) (*model.Asset, error) {
	var (
		as  model.Asset
		err error
	)

	err = database.Get(&as, `SELECT * FROM asset WHERE id = ?`, id)
	if err != nil {
		return nil, err
	}

	return &as, err
}

// Assets is the resolver for the Assets field.
func (r *queryResolver) Assets(ctx context.Context) ([]model.Asset, error) {
	var (
		assets []model.Asset
		err    error
	)

	err = database.Select(&assets, `SELECT * FROM asset WHERE id > 0`)
	if err != nil {
		return nil, err
	}

	return assets, err
}

// UserAuthorizationLink is the resolver for the userAuthorizationLink field.
func (r *queryResolver) UserAuthorizationLink(ctx context.Context, id int) (*model.UserAuthorizationLink, error) {
	return user.GetUserAuthorizationLink(ctx, id)
}

// UserAuthorizationLinks is the resolver for the userAuthorizationLinks field.
func (r *queryResolver) UserAuthorizationLinks(ctx context.Context) ([]model.UserAuthorizationLink, error) {
	return user.GetUserAuthorizationLinks(ctx)
}

// GetCode is the resolver for the getCode field.
func (r *queryResolver) GetCode(ctx context.Context) (*model.Code, error) {
	return user.GetCode(ctx)
}

// VerifyUserEmailValidationCode is the resolver for the verifyUserEmailValidationCode field.
func (r *queryResolver) VerifyUserEmailValidationCode(ctx context.Context, code int) (int, error) {
	return user.VerifyUserEmailValidationCode(ctx, code)
}

// SendUserEmailValidationCode is the resolver for the sendUserEmailValidationCode field.
func (r *queryResolver) SendUserEmailValidationCode(ctx context.Context) (*model.User, error) {
	return user.SendUserEmailValidationCode(ctx)
}

// GetPasswordHistory is the resolver for the getPasswordHistory field.
func (r *queryResolver) GetPasswordHistory(ctx context.Context) ([]model.Password, error) {
	return user.GetPasswordHistory(ctx)
}

// ActivateUser is the resolver for the activateUser field.
func (r *queryResolver) ActivateUser(ctx context.Context) (*model.User, error) {
	return user.ActivateUser(ctx)
}

// Users is the resolver for the Users field.
func (r *queryResolver) Users(ctx context.Context) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: Register - Register"))
}

// MyProfile is the resolver for the MyProfile field.
func (r *queryResolver) MyProfile(ctx context.Context) (*model.User, error) {
	return user.MyProfile(ctx)
}

// GetMessages is the resolver for the getMessages field.
func (r *queryResolver) GetMessages(ctx context.Context) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMessages - getMessages"))
}

// GetMessagesInLanguage is the resolver for the getMessagesInLanguage field.
func (r *queryResolver) GetMessagesInLanguage(ctx context.Context, language int) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMessagesInLanguage - getMessagesInLanguage"))
}

// GetMessage is the resolver for the getMessage field.
func (r *queryResolver) GetMessage(ctx context.Context, language int, resourceNumber int) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMessage - getMessage"))
}

// GetMenuList is the resolver for the getMenuList field.
func (r *queryResolver) GetMenuList(ctx context.Context) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMenuList - getMenuList"))
}

// GetMenuItems is the resolver for the getMenuItems field.
func (r *queryResolver) GetMenuItems(ctx context.Context, language int, menuNumber int) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMenuItems - getMenuItems"))
}

// GetUserAddress is the resolver for the getUserAddress field.
func (r *queryResolver) GetUserAddress(ctx context.Context) (*model.Address, error) {
	panic(fmt.Errorf("not implemented: GetUserAddress - getUserAddress"))
}

// RemoveUserAddress is the resolver for the removeUserAddress field.
func (r *queryResolver) RemoveUserAddress(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: RemoveUserAddress - removeUserAddress"))
}

// GetUserPhoneNumber is the resolver for the getUserPhoneNumber field.
func (r *queryResolver) GetUserPhoneNumber(ctx context.Context) (*model.PhoneNumber, error) {
	return phone.GetUserPhoneNumber(ctx)
}

// GetUserPlannings is the resolver for the getUserPlannings field.
func (r *queryResolver) GetUserPlannings(ctx context.Context) (*model.CalendarPlanning, error) {
	return planning.GetUserPlannings(ctx)
}

// GetPlanningActors is the resolver for the getPlanningActors field.
func (r *queryResolver) GetPlanningActors(ctx context.Context, calendarID int) ([]model.User, error) {
	return planning.GetPlanningActors(ctx, calendarID)
}

// GetUserSubjects is the resolver for the getUserSubjects field.
func (r *queryResolver) GetUserSubjects(ctx context.Context) ([]model.Subject, error) {
	panic(fmt.Errorf("not implemented: GetUserSubjects - getUserSubjects"))
}

// GetEducation is the resolver for the getEducation field.
func (r *queryResolver) GetEducation(ctx context.Context) ([]model.Education, error) {
	panic(fmt.Errorf("not implemented: GetEducation - getEducation"))
}

// GetUserEducationLevel is the resolver for the getUserEducationLevel field.
func (r *queryResolver) GetUserEducationLevel(ctx context.Context) (*model.Education, error) {
	panic(fmt.Errorf("not implemented: GetUserEducationLevel - getUserEducationLevel"))
}

// GetSchools is the resolver for the getSchools field.
func (r *queryResolver) GetSchools(ctx context.Context) ([]model.School, error) {
	var schools []model.School
	var err error

	err = database.Select(&schools, `SELECT * FROM school ORDER BY created_at`)
	if err != nil {
		return nil, err
	}

	return schools, err
}

// GetSubjects is the resolver for the getSubjects field.
func (r *queryResolver) GetSubjects(ctx context.Context, id int) ([]model.SchoolSubject, error) {
	var subjects []model.SchoolSubject
	var err error

	err = database.Select(&subjects, `SELECT * FROM school_subject WHERE school_number = ?`, id)
	if err != nil {
		return nil, err
	}

	return subjects, err
}

// GetSchool is the resolver for the getSchool field.
func (r *queryResolver) GetSchool(ctx context.Context, id int) (*model.School, error) {
	var (
		err    error
		school model.School
	)

	err = database.Get(&school, `SELECT * FROM school WHERE id = ?`, id)
	if err != nil {
		return nil, err
	}

	return &school, err
}

// GetUserAverageMark is the resolver for the getUserAverageMark field.
func (r *queryResolver) GetUserAverageMark(ctx context.Context, userID int) (*int, error) {
	panic(fmt.Errorf("not implemented: GetUserAverageMark - getUserAverageMark"))
}

// GetUserMarkComment is the resolver for the getUserMarkComment field.
func (r *queryResolver) GetUserMarkComment(ctx context.Context) ([]model.Mark, error) {
	panic(fmt.Errorf("not implemented: GetUserMarkComment - getUserMarkComment"))
}

// GetUserParent is the resolver for the getUserParent field.
func (r *queryResolver) GetUserParent(ctx context.Context) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserParent - getUserParent"))
}

// GetUserTutor is the resolver for the getUserTutor field.
func (r *queryResolver) GetUserTutor(ctx context.Context) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserTutor - getUserTutor"))
}

// GetUserProfessor is the resolver for the getUserProfessor field.
func (r *queryResolver) GetUserProfessor(ctx context.Context) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserProfessor - getUserProfessor"))
}

// GetStudent is the resolver for the getStudent field.
func (r *queryResolver) GetStudent(ctx context.Context) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: GetStudent - getStudent"))
}

// GenerateQRCode is the resolver for the generateQrCode field.
func (r *queryResolver) GenerateQRCode(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: GenerateQRCode - generateQrCode"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) RemoveUserPlannings(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: RemoveUserPlannings - removeUserPlannings"))
}
func (r *queryResolver) RemoveUserFromPlanning(ctx context.Context, calendarPlanningID int, selectedUserID int) (*string, error) {
	panic(fmt.Errorf("not implemented: RemoveUserFromPlanning - removeUserFromPlanning"))
}
