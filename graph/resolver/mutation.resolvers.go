package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/cend-org/duval/graph/generated"
	"github.com/cend-org/duval/graph/model"
	"github.com/cend-org/duval/internal/authentication"
	"github.com/cend-org/duval/internal/database"
	password2 "github.com/cend-org/duval/internal/password"
	"github.com/cend-org/duval/internal/school"
	"github.com/cend-org/duval/internal/token"
	"github.com/cend-org/duval/internal/user"
)

// RegisterWithEmail is the resolver for the RegisterWithEmail field.
func (r *mutationResolver) RegisterWithEmail(ctx context.Context, input string, as int) (*string, error) {
	var (
		usr  model.User
		auth model.Authorization
		pat  string
		err  error
	)

	usr, err = user.GetUserByEmail(input)
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return nil, err
	}

	if usr.ID == 0 {
		usr, err = user.NewUserWithEmail(input)
		if err != nil {
			return nil, err
		}
	}

	auth.UserID = usr.ID
	auth.AccessLevel = as

	_, err = database.Insert(auth)
	if err != nil {
		return nil, err
	}

	pat, err = authentication.LoginWithEmail(input)
	if err != nil {
		return nil, err
	}

	return &pat, err
}

// Register is the resolver for the Register field.
func (r *mutationResolver) Register(ctx context.Context, input model.UserInput) (*bool, error) {
	panic(fmt.Errorf("not implemented: Register - Register"))
}

// LogIn is the resolver for the LogIn field.
func (r *mutationResolver) LogIn(ctx context.Context, email string, password string) (*string, error) {
	var access string
	var err error

	access, err = authentication.LoginWithEmailAndPassword(email, password)
	if err != nil {
		return nil, err
	}

	return &access, err
}

// NewPassword is the resolver for the NewPassword field.
func (r *mutationResolver) NewPassword(ctx context.Context, password string) (*bool, error) {
	var (
		psw  model.Password
		err  error
		done bool
		tok  *token.Token
	)

	if len(strings.TrimSpace(password)) == 0 {
		return nil, errors.New("password cannot be empty")
	}

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, err
	}

	psw.UserID = tok.UserId
	psw.Hash = password2.Encode(password)
	if err != nil {
		return nil, err
	}

	_, err = database.Insert(psw)
	if err != nil {
		return nil, err
	}

	done = true

	return &done, err
}

// DelPassword is the resolver for the DelPassword field.
func (r *mutationResolver) DelPassword(ctx context.Context, id int) (*bool, error) {
	panic(fmt.Errorf("not implemented: DelPassword - DelPassword"))
}

// NewAsset is the resolver for the NewAsset field.
func (r *mutationResolver) NewAsset(ctx context.Context, asset model.AssetInput) (*model.Asset, error) {
	var (
		as  model.Asset
		err error
	)

	as = model.MapAssetInputToAsset(asset, as)
	_, err = database.InsertOne(as)
	if err != nil {
		return nil, err
	}

	return &as, err
}

// PopulateSchool is the resolver for the PopulateSchool field.
func (r *mutationResolver) PopulateSchool(ctx context.Context) (*bool, error) {
	err := school.Populate()
	if err != nil {
		return nil, err
	}

	done := true
	return &done, err
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
