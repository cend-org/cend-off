package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"errors"

	"github.com/cend-org/duval/graph/model"
	"github.com/cend-org/duval/internal/token"
	"github.com/cend-org/duval/internal/utils/errx"
	"github.com/cend-org/duval/pkg/academic"
	"github.com/cend-org/duval/pkg/media/cover"
	"github.com/cend-org/duval/pkg/media/cv"
	"github.com/cend-org/duval/pkg/media/profile"
	"github.com/cend-org/duval/pkg/media/video"
	usr "github.com/cend-org/duval/pkg/user"
	"github.com/cend-org/duval/pkg/user/authorization"
	"github.com/cend-org/duval/pkg/user/link"
)

type mutationResolver struct {
	*usr.UserMutation
	*academic.AcademicMutation
}

// NewStudent is the resolver for the NewStudent field.
func (r *mutationResolver) NewStudent(ctx context.Context, email string) (*model.BearerToken, error) {
	return usr.NewStudent(email)
}

// NewParent is the resolver for the NewParent field.
func (r *mutationResolver) NewParent(ctx context.Context, email string) (*model.BearerToken, error) {
	return usr.NewParent(email)
}

// NewTutor is the resolver for the NewTutor field.
func (r *mutationResolver) NewTutor(ctx context.Context, email string) (*model.BearerToken, error) {
	return usr.NewTutor(email)
}

// NewProfessor is the resolver for the NewProfessor field.
func (r *mutationResolver) NewProfessor(ctx context.Context, email string) (*model.BearerToken, error) {
	return usr.NewProfessor(email)
}

// NewPassword is the resolver for the NewPassword field.
func (r *mutationResolver) NewPassword(ctx context.Context, password model.PasswordInput) (*bool, error) {
	var tok *token.Token
	var err error

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errors.New("unAuthorized")
	}

	return usr.NewPassword(tok.UserId, password)
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.BearerToken, error) {
	return usr.Login(email, password)
}

// UpdateMyProfile is the resolver for the UpdateMyProfile field.
func (r *mutationResolver) UpdateMyProfile(ctx context.Context, profile model.UserInput) (*model.User, error) {
	var tok *token.Token
	var err error

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errors.New("unAuthorized")
	}

	return usr.UpdMyProfile(tok.UserId, profile)
}

// UpdateProfileAndPassword is the resolver for the UpdateProfileAndPassword field.
func (r *mutationResolver) UpdateProfileAndPassword(ctx context.Context, profile model.UserInput, password model.PasswordInput) (*model.User, error) {
	var (
		tok *token.Token
		err error
	)

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errors.New("unAuthorized")
	}

	return usr.UpdateProfileAndPassword(tok.UserId, profile, password)
}

// NewUserAcademicCourses is the resolver for the NewUserAcademicCourses field.
func (r *mutationResolver) NewUserAcademicCourses(ctx context.Context, courses []*model.UserAcademicCourseInput) (*bool, error) {
	var tok *token.Token
	var err error

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	return academic.NewUserAcademicCourses(tok.UserId, courses)
}

// SetUserAcademicLevel is the resolver for the SetUserAcademicLevel field.
func (r *mutationResolver) SetUserAcademicLevel(ctx context.Context, academicLevelID int) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	err = academic.SetUserAcademicLevel(tok.UserId, academicLevelID)
	if err != nil {
		return nil, err
	}

	status = true
	return &status, nil
}

// UpdAcademicCoursePreference is the resolver for the UpdAcademicCoursePreference field.
func (r *mutationResolver) UpdAcademicCoursePreference(ctx context.Context, coursesPreferences model.UserAcademicCoursePreferenceInput) (*model.UserAcademicCoursePreference, error) {
	var tok *token.Token
	var err error

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	preference, err := academic.UpdStudentAcademicCoursesPreferenceByParent(tok.UserId, coursesPreferences)
	if err != nil {
		return nil, errx.SupportError
	}

	return &preference, nil
}

// RemoveCoverLetter is the resolver for the RemoveCoverLetter field.
func (r *mutationResolver) RemoveCoverLetter(ctx context.Context) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}
	status, err = cover.RemoveProfileLetter(tok.UserId)
	if err != nil {
		return nil, err
	}

	return &status, nil
}

// RemoveCv is the resolver for the RemoveCv field.
func (r *mutationResolver) RemoveCv(ctx context.Context) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}
	status, err = cv.RemoveProfileCv(tok.UserId)
	if err != nil {
		return nil, err
	}

	return &status, nil
}

// RemoveProfileImage is the resolver for the RemoveProfileImage field.
func (r *mutationResolver) RemoveProfileImage(ctx context.Context) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}
	status, err = profile.RemoveProfileImage(tok.UserId)
	if err != nil {
		return nil, err
	}

	return &status, nil
}

// RemoveVideoPresentation is the resolver for the RemoveVideoPresentation field.
func (r *mutationResolver) RemoveVideoPresentation(ctx context.Context) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}
	status, err = video.RemoveProfileVideo(tok.UserId)
	if err != nil {
		return nil, err
	}

	return &status, nil
}

// UpdateStudentProfileByParent is the resolver for the UpdateStudentProfileByParent field.
func (r *mutationResolver) UpdateStudentProfileByParent(ctx context.Context, profile model.UserInput, studentID int) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return &status, errx.UnAuthorizedError
	}

	if !link.IsStudentParentLinked(tok.UserId, studentID) {
		return &status, errx.UlError
	}

	err = link.UpdateStudent(studentID, profile)
	if err != nil {
		return &status, err
	}

	status = true
	return &status, nil
}

// NewStudentsPassword is the resolver for the NewStudentsPassword field.
func (r *mutationResolver) NewStudentsPassword(ctx context.Context, studentID int) (*string, error) {
	var tok *token.Token
	var err error
	var password string

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return &password, errx.UnAuthorizedError
	}

	if !link.IsStudentParentLinked(tok.UserId, studentID) {
		return &password, errx.UlError
	}

	password, err = link.CreateStudentPassword(studentID)
	if err != nil {
		return &password, err
	}

	return &password, nil
}

// SetStudentAcademicLevelByParent is the resolver for the SetStudentAcademicLevelByParent field.
func (r *mutationResolver) SetStudentAcademicLevelByParent(ctx context.Context, academicLevelID int, studentID int) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	if !link.IsStudentParentLinked(tok.UserId, studentID) {
		return &status, errx.UlError
	}
	err = academic.SetUserAcademicLevel(studentID, academicLevelID)
	if err != nil {
		return nil, err
	}

	status = true
	return &status, nil
}

// NewStudentAcademicCoursesByParent is the resolver for the NewStudentAcademicCoursesByParent field.
func (r *mutationResolver) NewStudentAcademicCoursesByParent(ctx context.Context, courses []*model.UserAcademicCourseInput, studentID int) (*bool, error) {
	var tok *token.Token
	var err error

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	if !link.IsStudentParentLinked(tok.UserId, studentID) {
		return nil, errx.UlError
	}

	return academic.NewUserAcademicCourses(studentID, courses)
}

// UpdStudentAcademicCoursesPreferenceByParent is the resolver for the UpdStudentAcademicCoursesPreferenceByParent field.
func (r *mutationResolver) UpdStudentAcademicCoursesPreferenceByParent(ctx context.Context, coursesPreferences model.UserAcademicCoursePreferenceInput, studentID int) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	if !link.IsStudentParentLinked(tok.UserId, studentID) {
		return nil, errx.UlError
	}

	_, err = academic.UpdStudentAcademicCoursesPreferenceByParent(studentID, coursesPreferences)
	if err != nil {
		return nil, errx.SupportError
	}
	status = true

	return &status, nil
}

// NewStudentTutorByParent is the resolver for the NewStudentTutorByParent field.
func (r *mutationResolver) NewStudentTutorByParent(ctx context.Context, tutorID int, studentID int) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}
	if !link.IsStudentParentLinked(tok.UserId, studentID) {
		return nil, errx.UlError
	}

	_, err = link.AddStudentToTutor(tutorID, studentID)
	if err != nil {
		return nil, err
	}

	status = true
	return &status, nil
}

// UserStudent is the resolver for the UserStudent field.
func (r *mutationResolver) UserStudent(ctx context.Context, name string, familyName string) (*model.User, error) {
	var (
		tok     *token.Token
		err     error
		student *model.User
	)

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, err
	}

	student, err = link.AddStudentToLink(tok.UserId, name, familyName)
	if err != nil {
		return nil, err
	}

	return student, nil
}

// NewStudentTutor is the resolver for the NewStudentTutor field.
func (r *mutationResolver) NewStudentTutor(ctx context.Context, userID int) (*model.User, error) {
	var (
		tok     *token.Token
		err     error
		student *model.User
	)

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	if !authorization.IsUserStudent(tok.UserId) && !authorization.IsUserTutor(tok.UserId) {
		return nil, errx.UnAuthorizedError
	}

	if !authorization.IsUserStudent(userID) && !authorization.IsUserTutor(userID) {
		return nil, errx.UnAuthorizedError
	}

	if !authorization.IsUserStudent(tok.UserId) || !authorization.IsUserTutor(userID) {
		return nil, errx.UnAuthorizedError
	}

	if authorization.IsUserTutor(tok.UserId) && authorization.IsUserStudent(userID) {
		student, err = link.AddStudentToTutor(tok.UserId, userID)
		if err != nil {
			return nil, err
		}
	}

	if authorization.IsUserTutor(userID) && authorization.IsUserStudent(tok.UserId) {
		student, err = link.AddStudentToTutor(userID, tok.UserId)
		if err != nil {
			return nil, err
		}
	}

	return student, nil
}

// NewStudentProfessor is the resolver for the NewStudentProfessor field.
func (r *mutationResolver) NewStudentProfessor(ctx context.Context, userID int) (*model.User, error) {
	var (
		tok     *token.Token
		err     error
		student *model.User
	)

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}

	if !authorization.IsUserStudent(tok.UserId) && !authorization.IsUserProfessor(tok.UserId) {
		return nil, errx.UnAuthorizedError
	}

	if !authorization.IsUserStudent(userID) && !authorization.IsUserProfessor(userID) {
		return nil, errx.UnAuthorizedError
	}

	if authorization.IsUserProfessor(tok.UserId) && authorization.IsUserStudent(userID) {
		student, err = link.AddStudentToProfessor(tok.UserId, userID)
		if err != nil {
			return nil, err
		}
	}

	if authorization.IsUserProfessor(userID) && authorization.IsUserStudent(tok.UserId) {
		student, err = link.AddStudentToProfessor(userID, tok.UserId)
		if err != nil {
			return nil, err
		}
	}

	return student, nil
}

// NewUserAcademicLevels is the resolver for the NewUserAcademicLevels field.
func (r *mutationResolver) NewUserAcademicLevels(ctx context.Context, academicLevelIds []*int) (*bool, error) {
	var tok *token.Token
	var err error
	var status bool

	tok, err = token.GetFromContext(ctx)
	if err != nil {
		return nil, errx.UnAuthorizedError
	}
	err = academic.SetUserAcademicLevels(tok.UserId, academicLevelIds)
	if err != nil {
		return nil, err
	}
	status = true
	return &status, nil
}
