type Mutation {
    NewStudent(email: String!): BearerToken #Create new Student
    NewParent(email: String!): BearerToken   #Create new Parent
    NewTutor(email: String!): BearerToken  #Create new Tutor
    NewProfessor(email: String!): BearerToken #Create new Professor
    NewPassword(password: PasswordInput!): Boolean #Create new Password
    Login(email: String!, password: String!): BearerToken #Sign in using email and password
    UpdateMyProfile(profile: UserInput!): User #Update information for current user
    UpdateProfileAndPassword(profile: UserInput! , password: PasswordInput!): User  #Update both information and password for current user
    NewUserAcademicCourses(courses: [UserAcademicCourseInput]!) : Boolean #Select set of preferred course
    #Select set of preferred course
    UpdateUserStatus(status: Int!): Boolean

    #    Education
    SetUserAcademicLevel(AcademicLevelId: Int!): Boolean #Select academic level for the current user based on id of the level
    UpdAcademicCoursePreference(coursesPreferences: UserAcademicCoursePreferenceInput!): UserAcademicCoursePreference #Update information for current user's academic level

    #    User Media
    RemoveCoverLetter: Boolean #Remove both cover letter and cover letter thumb from database
    RemoveCv: Boolean #Remove both cv and cv thumb from database
    RemoveProfileImage: Boolean #Remove both profile image and profile image  thumb from database
    RemoveVideoPresentation: Boolean #Remove current user video presentation

    #    Student - parent
    UpdateStudentProfileByParent(profile: UserInput! , studentId: Int!): Boolean #Set Information of the student from parent (current user)
    NewStudentsPassword(studentId: Int!): String #Set password of the student from parent (current user)
    SetStudentAcademicLevelByParent(AcademicLevelId: Int!, studentId: Int!): Boolean #Set academic level of the student from parent (current user)
    NewStudentAcademicCoursesByParent(courses: [UserAcademicCourseInput]!, studentId: Int!) : Boolean #select set of course which student have difficulties from parent (current user)
    UpdStudentAcademicCoursesPreferenceByParent(coursesPreferences: UserAcademicCoursePreferenceInput! , studentId: Int!) : Boolean  #reset  set of course which student have difficulties from parent (current user)
    NewStudentTutorByParent(tutorId: Int! , studentId: Int!): Boolean #Link student with a selected tutor from parent (current user)


    #    Link
    UserStudent(name: String! , familyName: String!): User #Add student from other type of users
    NewStudentTutor(userId: Int!): User  #Link current student with selected tutor
    NewStudentProfessor(userId: Int!): User #Link current student with selected professor OR link current professor with selected student

    #   Tutor - Professor
    NewUserAcademicLevels(academicLevelIds: [Int]!): Boolean #Select set of level for tutor and professor

    # Appointment
    NewUserAppointment(availability: AppointmentInput!):  Boolean
    NewUserAppointmentByParent(studentId: Int!, availability: AppointmentInput!):  Boolean

    #    Translation
    NewLanguageResource(languageResource: LanguageResourceInput!): String
    UpdLanguageResource(languageResource: LanguageResourceInput!): String
    AddOrGetLanguageResource(language: Int! , resourceRef : String!): String
    RemoveLanguageResource(language: Int! , resourceRef : String!): Boolean
    RemoveLanguageResources(resourceRef: String!): Boolean

    #    Profile screen
    UpdateMyPassword(hash : PasswordInput!) : Boolean  #Update user password in the profile screen
    UpdateMyEmail(email : String!) : User! #Update current user's mail


}
