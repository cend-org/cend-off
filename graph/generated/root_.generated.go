// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cend-org/duval/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AcademicCourse struct {
		AcademicLevelId func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		Id              func(childComplexity int) int
		Name            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	AcademicLevel struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Id        func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Authorization struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Id        func(childComplexity int) int
		Level     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserId    func(childComplexity int) int
	}

	BearerToken struct {
		T func(childComplexity int) int
	}

	Media struct {
		ContentType func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Extension   func(childComplexity int) int
		FileName    func(childComplexity int) int
		Id          func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Xid         func(childComplexity int) int
	}

	MediaThumb struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Extension func(childComplexity int) int
		Id        func(childComplexity int) int
		MediaXid  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Xid       func(childComplexity int) int
	}

	Mutation struct {
		Login                    func(childComplexity int, email string, password string) int
		NewParent                func(childComplexity int, email string) int
		NewPassword              func(childComplexity int, password model.PasswordInput) int
		NewProfessor             func(childComplexity int, email string) int
		NewStudent               func(childComplexity int, email string) int
		NewTutor                 func(childComplexity int, email string) int
		NewUserAcademicCourses   func(childComplexity int, courses []*model.UserAcademicCourseInput) int
		UpdateMyProfile          func(childComplexity int, profile model.UserInput) int
		UpdateProfileAndPassword func(childComplexity int, profile model.UserInput, password model.PasswordInput) int
	}

	Password struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Hash      func(childComplexity int) int
		Id        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserId    func(childComplexity int) int
	}

	Query struct {
		AcademicCourses func(childComplexity int, academicLevelID int) int
		AcademicLevels  func(childComplexity int) int
		MyProfile       func(childComplexity int) int
	}

	User struct {
		AddOnTitle            func(childComplexity int) int
		AdditionalDescription func(childComplexity int) int
		Age                   func(childComplexity int) int
		BirthDate             func(childComplexity int) int
		CoverText             func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		Description           func(childComplexity int) int
		Email                 func(childComplexity int) int
		ExperienceDetail      func(childComplexity int) int
		FamilyName            func(childComplexity int) int
		Id                    func(childComplexity int) int
		Lang                  func(childComplexity int) int
		Matricule             func(childComplexity int) int
		Name                  func(childComplexity int) int
		NickName              func(childComplexity int) int
		Profile               func(childComplexity int) int
		ProfileImageXid       func(childComplexity int) int
		Sex                   func(childComplexity int) int
		Status                func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	UserAcademicCourse struct {
		CourseId  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Id        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserId    func(childComplexity int) int
	}

	UserMediaDetail struct {
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DocumentType func(childComplexity int) int
		DocumentXid  func(childComplexity int) int
		Id           func(childComplexity int) int
		OwnerId      func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AcademicCourse.AcademicLevelId":
		if e.complexity.AcademicCourse.AcademicLevelId == nil {
			break
		}

		return e.complexity.AcademicCourse.AcademicLevelId(childComplexity), true

	case "AcademicCourse.CreatedAt":
		if e.complexity.AcademicCourse.CreatedAt == nil {
			break
		}

		return e.complexity.AcademicCourse.CreatedAt(childComplexity), true

	case "AcademicCourse.DeletedAt":
		if e.complexity.AcademicCourse.DeletedAt == nil {
			break
		}

		return e.complexity.AcademicCourse.DeletedAt(childComplexity), true

	case "AcademicCourse.Id":
		if e.complexity.AcademicCourse.Id == nil {
			break
		}

		return e.complexity.AcademicCourse.Id(childComplexity), true

	case "AcademicCourse.Name":
		if e.complexity.AcademicCourse.Name == nil {
			break
		}

		return e.complexity.AcademicCourse.Name(childComplexity), true

	case "AcademicCourse.UpdatedAt":
		if e.complexity.AcademicCourse.UpdatedAt == nil {
			break
		}

		return e.complexity.AcademicCourse.UpdatedAt(childComplexity), true

	case "AcademicLevel.CreatedAt":
		if e.complexity.AcademicLevel.CreatedAt == nil {
			break
		}

		return e.complexity.AcademicLevel.CreatedAt(childComplexity), true

	case "AcademicLevel.DeletedAt":
		if e.complexity.AcademicLevel.DeletedAt == nil {
			break
		}

		return e.complexity.AcademicLevel.DeletedAt(childComplexity), true

	case "AcademicLevel.Id":
		if e.complexity.AcademicLevel.Id == nil {
			break
		}

		return e.complexity.AcademicLevel.Id(childComplexity), true

	case "AcademicLevel.Name":
		if e.complexity.AcademicLevel.Name == nil {
			break
		}

		return e.complexity.AcademicLevel.Name(childComplexity), true

	case "AcademicLevel.UpdatedAt":
		if e.complexity.AcademicLevel.UpdatedAt == nil {
			break
		}

		return e.complexity.AcademicLevel.UpdatedAt(childComplexity), true

	case "Authorization.CreatedAt":
		if e.complexity.Authorization.CreatedAt == nil {
			break
		}

		return e.complexity.Authorization.CreatedAt(childComplexity), true

	case "Authorization.DeletedAt":
		if e.complexity.Authorization.DeletedAt == nil {
			break
		}

		return e.complexity.Authorization.DeletedAt(childComplexity), true

	case "Authorization.Id":
		if e.complexity.Authorization.Id == nil {
			break
		}

		return e.complexity.Authorization.Id(childComplexity), true

	case "Authorization.Level":
		if e.complexity.Authorization.Level == nil {
			break
		}

		return e.complexity.Authorization.Level(childComplexity), true

	case "Authorization.UpdatedAt":
		if e.complexity.Authorization.UpdatedAt == nil {
			break
		}

		return e.complexity.Authorization.UpdatedAt(childComplexity), true

	case "Authorization.UserId":
		if e.complexity.Authorization.UserId == nil {
			break
		}

		return e.complexity.Authorization.UserId(childComplexity), true

	case "BearerToken.T":
		if e.complexity.BearerToken.T == nil {
			break
		}

		return e.complexity.BearerToken.T(childComplexity), true

	case "Media.ContentType":
		if e.complexity.Media.ContentType == nil {
			break
		}

		return e.complexity.Media.ContentType(childComplexity), true

	case "Media.CreatedAt":
		if e.complexity.Media.CreatedAt == nil {
			break
		}

		return e.complexity.Media.CreatedAt(childComplexity), true

	case "Media.DeletedAt":
		if e.complexity.Media.DeletedAt == nil {
			break
		}

		return e.complexity.Media.DeletedAt(childComplexity), true

	case "Media.Extension":
		if e.complexity.Media.Extension == nil {
			break
		}

		return e.complexity.Media.Extension(childComplexity), true

	case "Media.FileName":
		if e.complexity.Media.FileName == nil {
			break
		}

		return e.complexity.Media.FileName(childComplexity), true

	case "Media.Id":
		if e.complexity.Media.Id == nil {
			break
		}

		return e.complexity.Media.Id(childComplexity), true

	case "Media.UpdatedAt":
		if e.complexity.Media.UpdatedAt == nil {
			break
		}

		return e.complexity.Media.UpdatedAt(childComplexity), true

	case "Media.Xid":
		if e.complexity.Media.Xid == nil {
			break
		}

		return e.complexity.Media.Xid(childComplexity), true

	case "MediaThumb.CreatedAt":
		if e.complexity.MediaThumb.CreatedAt == nil {
			break
		}

		return e.complexity.MediaThumb.CreatedAt(childComplexity), true

	case "MediaThumb.DeletedAt":
		if e.complexity.MediaThumb.DeletedAt == nil {
			break
		}

		return e.complexity.MediaThumb.DeletedAt(childComplexity), true

	case "MediaThumb.Extension":
		if e.complexity.MediaThumb.Extension == nil {
			break
		}

		return e.complexity.MediaThumb.Extension(childComplexity), true

	case "MediaThumb.Id":
		if e.complexity.MediaThumb.Id == nil {
			break
		}

		return e.complexity.MediaThumb.Id(childComplexity), true

	case "MediaThumb.MediaXid":
		if e.complexity.MediaThumb.MediaXid == nil {
			break
		}

		return e.complexity.MediaThumb.MediaXid(childComplexity), true

	case "MediaThumb.UpdatedAt":
		if e.complexity.MediaThumb.UpdatedAt == nil {
			break
		}

		return e.complexity.MediaThumb.UpdatedAt(childComplexity), true

	case "MediaThumb.Xid":
		if e.complexity.MediaThumb.Xid == nil {
			break
		}

		return e.complexity.MediaThumb.Xid(childComplexity), true

	case "Mutation.Login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_Login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["email"].(string), args["password"].(string)), true

	case "Mutation.NewParent":
		if e.complexity.Mutation.NewParent == nil {
			break
		}

		args, err := ec.field_Mutation_NewParent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewParent(childComplexity, args["email"].(string)), true

	case "Mutation.NewPassword":
		if e.complexity.Mutation.NewPassword == nil {
			break
		}

		args, err := ec.field_Mutation_NewPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewPassword(childComplexity, args["password"].(model.PasswordInput)), true

	case "Mutation.NewProfessor":
		if e.complexity.Mutation.NewProfessor == nil {
			break
		}

		args, err := ec.field_Mutation_NewProfessor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewProfessor(childComplexity, args["email"].(string)), true

	case "Mutation.NewStudent":
		if e.complexity.Mutation.NewStudent == nil {
			break
		}

		args, err := ec.field_Mutation_NewStudent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewStudent(childComplexity, args["email"].(string)), true

	case "Mutation.NewTutor":
		if e.complexity.Mutation.NewTutor == nil {
			break
		}

		args, err := ec.field_Mutation_NewTutor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewTutor(childComplexity, args["email"].(string)), true

	case "Mutation.NewUserAcademicCourses":
		if e.complexity.Mutation.NewUserAcademicCourses == nil {
			break
		}

		args, err := ec.field_Mutation_NewUserAcademicCourses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewUserAcademicCourses(childComplexity, args["courses"].([]*model.UserAcademicCourseInput)), true

	case "Mutation.UpdateMyProfile":
		if e.complexity.Mutation.UpdateMyProfile == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateMyProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMyProfile(childComplexity, args["profile"].(model.UserInput)), true

	case "Mutation.UpdateProfileAndPassword":
		if e.complexity.Mutation.UpdateProfileAndPassword == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateProfileAndPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProfileAndPassword(childComplexity, args["profile"].(model.UserInput), args["password"].(model.PasswordInput)), true

	case "Password.CreatedAt":
		if e.complexity.Password.CreatedAt == nil {
			break
		}

		return e.complexity.Password.CreatedAt(childComplexity), true

	case "Password.DeletedAt":
		if e.complexity.Password.DeletedAt == nil {
			break
		}

		return e.complexity.Password.DeletedAt(childComplexity), true

	case "Password.Hash":
		if e.complexity.Password.Hash == nil {
			break
		}

		return e.complexity.Password.Hash(childComplexity), true

	case "Password.Id":
		if e.complexity.Password.Id == nil {
			break
		}

		return e.complexity.Password.Id(childComplexity), true

	case "Password.UpdatedAt":
		if e.complexity.Password.UpdatedAt == nil {
			break
		}

		return e.complexity.Password.UpdatedAt(childComplexity), true

	case "Password.UserId":
		if e.complexity.Password.UserId == nil {
			break
		}

		return e.complexity.Password.UserId(childComplexity), true

	case "Query.AcademicCourses":
		if e.complexity.Query.AcademicCourses == nil {
			break
		}

		args, err := ec.field_Query_AcademicCourses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AcademicCourses(childComplexity, args["AcademicLevelId"].(int)), true

	case "Query.AcademicLevels":
		if e.complexity.Query.AcademicLevels == nil {
			break
		}

		return e.complexity.Query.AcademicLevels(childComplexity), true

	case "Query.MyProfile":
		if e.complexity.Query.MyProfile == nil {
			break
		}

		return e.complexity.Query.MyProfile(childComplexity), true

	case "User.AddOnTitle":
		if e.complexity.User.AddOnTitle == nil {
			break
		}

		return e.complexity.User.AddOnTitle(childComplexity), true

	case "User.AdditionalDescription":
		if e.complexity.User.AdditionalDescription == nil {
			break
		}

		return e.complexity.User.AdditionalDescription(childComplexity), true

	case "User.Age":
		if e.complexity.User.Age == nil {
			break
		}

		return e.complexity.User.Age(childComplexity), true

	case "User.BirthDate":
		if e.complexity.User.BirthDate == nil {
			break
		}

		return e.complexity.User.BirthDate(childComplexity), true

	case "User.CoverText":
		if e.complexity.User.CoverText == nil {
			break
		}

		return e.complexity.User.CoverText(childComplexity), true

	case "User.CreatedAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.DeletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.Description":
		if e.complexity.User.Description == nil {
			break
		}

		return e.complexity.User.Description(childComplexity), true

	case "User.Email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.ExperienceDetail":
		if e.complexity.User.ExperienceDetail == nil {
			break
		}

		return e.complexity.User.ExperienceDetail(childComplexity), true

	case "User.FamilyName":
		if e.complexity.User.FamilyName == nil {
			break
		}

		return e.complexity.User.FamilyName(childComplexity), true

	case "User.Id":
		if e.complexity.User.Id == nil {
			break
		}

		return e.complexity.User.Id(childComplexity), true

	case "User.Lang":
		if e.complexity.User.Lang == nil {
			break
		}

		return e.complexity.User.Lang(childComplexity), true

	case "User.Matricule":
		if e.complexity.User.Matricule == nil {
			break
		}

		return e.complexity.User.Matricule(childComplexity), true

	case "User.Name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.NickName":
		if e.complexity.User.NickName == nil {
			break
		}

		return e.complexity.User.NickName(childComplexity), true

	case "User.Profile":
		if e.complexity.User.Profile == nil {
			break
		}

		return e.complexity.User.Profile(childComplexity), true

	case "User.ProfileImageXid":
		if e.complexity.User.ProfileImageXid == nil {
			break
		}

		return e.complexity.User.ProfileImageXid(childComplexity), true

	case "User.Sex":
		if e.complexity.User.Sex == nil {
			break
		}

		return e.complexity.User.Sex(childComplexity), true

	case "User.Status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.UpdatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "UserAcademicCourse.CourseId":
		if e.complexity.UserAcademicCourse.CourseId == nil {
			break
		}

		return e.complexity.UserAcademicCourse.CourseId(childComplexity), true

	case "UserAcademicCourse.CreatedAt":
		if e.complexity.UserAcademicCourse.CreatedAt == nil {
			break
		}

		return e.complexity.UserAcademicCourse.CreatedAt(childComplexity), true

	case "UserAcademicCourse.DeletedAt":
		if e.complexity.UserAcademicCourse.DeletedAt == nil {
			break
		}

		return e.complexity.UserAcademicCourse.DeletedAt(childComplexity), true

	case "UserAcademicCourse.Id":
		if e.complexity.UserAcademicCourse.Id == nil {
			break
		}

		return e.complexity.UserAcademicCourse.Id(childComplexity), true

	case "UserAcademicCourse.UpdatedAt":
		if e.complexity.UserAcademicCourse.UpdatedAt == nil {
			break
		}

		return e.complexity.UserAcademicCourse.UpdatedAt(childComplexity), true

	case "UserAcademicCourse.UserId":
		if e.complexity.UserAcademicCourse.UserId == nil {
			break
		}

		return e.complexity.UserAcademicCourse.UserId(childComplexity), true

	case "UserMediaDetail.CreatedAt":
		if e.complexity.UserMediaDetail.CreatedAt == nil {
			break
		}

		return e.complexity.UserMediaDetail.CreatedAt(childComplexity), true

	case "UserMediaDetail.DeletedAt":
		if e.complexity.UserMediaDetail.DeletedAt == nil {
			break
		}

		return e.complexity.UserMediaDetail.DeletedAt(childComplexity), true

	case "UserMediaDetail.DocumentType":
		if e.complexity.UserMediaDetail.DocumentType == nil {
			break
		}

		return e.complexity.UserMediaDetail.DocumentType(childComplexity), true

	case "UserMediaDetail.DocumentXid":
		if e.complexity.UserMediaDetail.DocumentXid == nil {
			break
		}

		return e.complexity.UserMediaDetail.DocumentXid(childComplexity), true

	case "UserMediaDetail.Id":
		if e.complexity.UserMediaDetail.Id == nil {
			break
		}

		return e.complexity.UserMediaDetail.Id(childComplexity), true

	case "UserMediaDetail.OwnerId":
		if e.complexity.UserMediaDetail.OwnerId == nil {
			break
		}

		return e.complexity.UserMediaDetail.OwnerId(childComplexity), true

	case "UserMediaDetail.UpdatedAt":
		if e.complexity.UserMediaDetail.UpdatedAt == nil {
			break
		}

		return e.complexity.UserMediaDetail.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputPasswordInput,
		ec.unmarshalInputUserAcademicCourseInput,
		ec.unmarshalInputUserInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../gql/authorization/authorization.graphqls", Input: `type Authorization {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    UserId: ID! @goField(name: "UserId")
    Level: Int!
}`, BuiltIn: false},
	{Name: "../gql/directive/directive.graphqls", Input: `directive @goModel(
    model: String
    models: [String!]
    forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
    forceResolver: Boolean
    name: String
    omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
    key: String!
    value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION`, BuiltIn: false},
	{Name: "../gql/education/education.graphqls", Input: `type AcademicLevel {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    Name: String!
}

type AcademicCourse {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    AcademicLevelId: ID! @goField(name: "AcademicLevelId")
    Name: String!
}

type UserAcademicCourse {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    UserId: Int! @goField(name: "UserId")
    CourseId :Int! @goField(name: "CourseId")
}

input UserAcademicCourseInput {
    CourseId :Int @goField(name: "CourseId")
}
`, BuiltIn: false},
	{Name: "../gql/media/media.graphqls", Input: `type Media {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    FileName : String!
    Extension: String!
    Xid: String! @goField(name: "Xid")
    ContentType: Int!
}

type MediaThumb {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    Extension: String!
    MediaXid: String! @goField(name: "MediaXid")
    Xid: String! @goField(name: "Xid")
}

type UserMediaDetail {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    OwnerId : Int! @goField(name: "OwnerId")
    DocumentType: Int!
    DocumentXid : String! @goField(name: "DocumentXid")
}
`, BuiltIn: false},
	{Name: "../gql/password/password.graphqls", Input: `type Password {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime!
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    UserId: Int! @goField(name: "UserId")
    Hash: String!
}

input PasswordInput{
    Hash: String
}`, BuiltIn: false},
	{Name: "../gql/scalar/scalar.graphqls", Input: `"The ` + "`" + `Date` + "`" + ` is a date in the format YYYY-MM-DD"
scalar Date

"The ` + "`" + `DateTime` + "`" + ` is a date in the format ISO 8601 format: ` + "`" + `2006-01-02T15:04:05Z07:00` + "`" + `"
scalar DateTime


"The ` + "`" + `UploadFile, // b.txt` + "`" + ` scalar type represents a multipart file upload."
scalar Upload
`, BuiltIn: false},
	{Name: "../gql/schema/mutation.graphqls", Input: `type Mutation {
    NewStudent(email: String!): BearerToken
    NewParent(email: String!): BearerToken
    NewTutor(email: String!): BearerToken
    NewProfessor(email: String!): BearerToken
    NewPassword(password: PasswordInput!): Boolean
    Login(email: String!, password: String!): BearerToken
    UpdateMyProfile(profile: UserInput!): User
    UpdateProfileAndPassword(profile: UserInput! , password: PasswordInput!): User
    NewUserAcademicCourses(courses: [UserAcademicCourseInput]!) : Boolean
}`, BuiltIn: false},
	{Name: "../gql/schema/query.graphqls", Input: `type Query {
    MyProfile : User
    AcademicLevels : [AcademicLevel!]
    AcademicCourses(AcademicLevelId: Int!) : [AcademicCourse!]
}`, BuiltIn: false},
	{Name: "../gql/token/token.graphqls", Input: `type BearerToken {
    T: String!
}`, BuiltIn: false},
	{Name: "../gql/user/user.graphqls", Input: `type User {
    Id: ID! @goField(name: "Id")
    CreatedAt: DateTime! @goTag(key: "name",value: "-")
    UpdatedAt: DateTime!
    DeletedAt: DateTime
    Name: String!
    FamilyName: String!
    NickName: String!
    Email: String!
    Matricule: String!
    Age: Int!
    BirthDate: DateTime!
    Sex: Int!
    Lang: Int!
    Status: Int!
    ProfileImageXid: String!
    Description: String!
    CoverText: String!
    Profile: String!
    ExperienceDetail: String!
    AdditionalDescription: String!
    AddOnTitle: String!
}

input UserInput {
    Name: String
    FamilyName: String
    NickName: String
    Email: String
    BirthDate: DateTime
    Sex: Int
    Lang: Int
    Description: String
    CoverText: String
    Profile: String
    ExperienceDetail: String
    AdditionalDescription: String
    AddOnTitle: String
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
